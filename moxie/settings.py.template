"""
Django settings for moxie project.

Generated by 'django-admin startproject' using Django 3.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import platform
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _
from django.urls import reverse_lazy

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not os.environ.get('DEBUG') == "0"

ALLOWED_HOSTS = [
    '127.0.0.1',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'mathfilters',
    'crispy_forms',
    'captcha',
    'moxie'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    'moxie.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',
]

ROOT_URLCONF = 'moxie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'moxie.context_processors.js_version',
                'moxie.context_processors.urls',
            ],
        },
    },
]

WSGI_APPLICATION = 'moxie.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT')
    },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

LANGUAGES = (
    ('es', _('Español')),
    ('en', _('English')),
    ('ca', _('Català')),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    "moxie/static/",
    "node_modules/"
]

STATIC_ROOT = '/usr/src/moxie/static'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

JS_VERSION = '1.00.000'

LOGIN_URL = reverse_lazy('index')

FROM_EMAIL = os.environ.get('FROM_EMAIL')

LOGGING_LEVEL = os.environ.get('LOGGING_LEVEL', 'INFO')

if 'HANDLERS' not in vars() and 'HANDLERS' not in globals():
    HANDLERS = {
        'console': {
            'level': LOGGING_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    }

if not os.path.exists('/dev/log') and platform.system() == 'Darwin':
    HANDLERS['syslog'] = {
        'level': LOGGING_LEVEL,
        'class': 'logging.handlers.SysLogHandler',
        'address': '/var/run/syslog',
        'formatter': 'verbose',
    }

if 'LOG_HANDLERS' not in vars() and 'LOG_HANDLERS' not in globals():
    LOG_HANDLERS = HANDLERS

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'verbose': {
            'format': 'python[%(process)d]: [%(levelname)s] [%(name)s] %(message)s'
        },
    },
    'handlers': HANDLERS,
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'django.request': {
            'handlers': LOG_HANDLERS,
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'django': {
            'handlers': LOG_HANDLERS,
            'level': LOGGING_LEVEL,
            'propagate': False,
        },
        'logger': {
            'handlers': ['console'],
            'level': LOGGING_LEVEL,
            'propagate': False
        },
    }
}